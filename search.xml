<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>S7-1200 OPC通讯中如何添加DB地址条目</title>
    <url>/2019/03/09/S7-1200-OPC%E9%80%9A%E8%AE%AF%E4%B8%AD%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0DB%E5%9C%B0%E5%9D%80%E6%9D%A1%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1.问题描述</h1><p>WinCC自V7.2版本起，新增加了“SIMATIC S7-1200，S7-1500 Channel”通道，用于WinCC与 S7-1200/S7-1500 PLC之间的通信。此驱动只支持以太网通讯，基于 TCP/IP 协议。</p>
<p>而对于低版本的WinCC，通常采用的方法是：</p>
<p>STEP 7 (TIA Portal)中组态SIMATIC PC Station作为OPC SERVER（SIMATIC NET PC Software）与S7-1200 PLC建立通讯（如基于 ISO-on-TCP 的 S7 协议），WINCC通过OPC驱动访问服务。如何组态就不叙述，网上资料很多。</p>
<p><img src="2019-03-09-12-08-20.png"></p>
<p>会遇到个问题，就是在OPC Scout中无法添加DB数据块条目。</p>
<p><img src="2019-03-09-12-08-45.png"></p>
<h1 id="2-了解一下OPC-Scout"><a href="#2-了解一下OPC-Scout" class="headerlink" title="2.了解一下OPC Scout"></a>2.了解一下OPC Scout</h1><p>OPC Scout是什么，它是一个调试和测试OPC系统的支持工具，主要功能包括：</p>
<ul>
<li><strong>浏览和显示可用的OPC服务器</strong></li>
<li><strong>对于OPC UA，支持使用“发现”功能浏览对象</strong></li>
<li><strong>创建/保存连接要获取的对象</strong></li>
<li><strong>测试连接和对象</strong></li>
</ul>
<p>SIMATIC PC Station作为OPC SERVER和它没有太大关系。STEP 7 (TIA Portal)组态下载到PC Station后，运行Simatic OPC DA Server（进程opcdaserver.exe），WINCC即可建立OPC Client连接，添加变量访问S7-1200 PLC。</p>
<p><img src="2019-03-09-12-11-01.png"></p>
<h1 id="3-不同数据类型的DB变量对应的OPC条目格式"><a href="#3-不同数据类型的DB变量对应的OPC条目格式" class="headerlink" title="3.不同数据类型的DB变量对应的OPC条目格式"></a>3.不同数据类型的DB变量对应的OPC条目格式</h1><p>主要类型对应格式：</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>条目格式</th>
</tr>
</thead>
<tbody><tr>
<td>BOOL</td>
<td>X0.0</td>
</tr>
<tr>
<td>BYTE</td>
<td>B0</td>
</tr>
<tr>
<td>WORD</td>
<td>W0</td>
</tr>
<tr>
<td>DWORD</td>
<td>D0</td>
</tr>
<tr>
<td>INT</td>
<td>INT0</td>
</tr>
<tr>
<td>DINT</td>
<td>DINT0</td>
</tr>
<tr>
<td>REAL</td>
<td>REAL0</td>
</tr>
</tbody></table>
<p>如读取DB1.DBW2的OPC条目名称为：S7:[S7_Connection_1]DB1,W2，其中S7对应OPC SERVER与PLC通讯类型；S7_Connection_1对应连接名称；DB1为DB块编号，对应区域标识（包括M、I、Q）；W2中W为WORD，对应数据类型标识，2对应起始地址；对于数组还有数据长度。</p>
<p><img src="2019-03-09-12-12-21.png"></p>
<p>然后把“属性-地址”中“8210”修改成“18”。包括OPC条目格式，这些都涉及到OPC协议一些核心内容，以后会分享些相关内容给大家。</p>
<p><img src="2019-03-09-12-12-35.png"></p>
<p>这种通过绝对地址访问DB数据，需要取消DB的“优化的块访问”。</p>
<h1 id="4-其它"><a href="#4-其它" class="headerlink" title="4.其它"></a>4.其它</h1><p>关于把STEP 7 (TIA Portal)中变量导入OPC Scout（符号表中的符号包括在 OPC 服务器的系统数据中，可使用此方法代替上面方法访问DB）；OPC 服务器访问优化数据块，可查看TIA Portal帮助。若遇到什么问题可给我留言。</p>
<p>对于其它opc server如kepserverex ，也可直接在WINCC使用该opc server条目格式如Channel1.Device1.Q0.1访问PLC，省略在kepserverex建立变量条目。</p>
]]></content>
      <categories>
        <category>WINCC</category>
        <category>OPC</category>
        <category>S7-1200</category>
      </categories>
      <tags>
        <tag>S7-1200</tag>
        <tag>WINCC</tag>
        <tag>SIMATIC NET OPC</tag>
      </tags>
  </entry>
  <entry>
    <title>S7-200 SMART PLC 一种自定义定时器的实现方法</title>
    <url>/2019/01/24/S7-200-SMART-PLC-%E4%B8%80%E7%A7%8D%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>对于S7-200 SMART PLC，它的定时器资源是有限的，特别是高分辨率的定时器，如分辨率为1ms的定时器只有T32、T96两个，且不能同时使用：例如，不能同时使用 TON T32 和 TOF T32。</p>
<p><img src="2019-01-24-15-30-29.png"></p>
<p>那有没有其它方法实现简单的高分辨率定时？</p>
<p>这里给大家分享个方法，就是使用“最后一次扫描循环的扫描时间”系统变量Last_Scan (地址SMW22)，代替TON、TOF定时器，实现简单的定时程序。</p>
<p>程序：<br>定义一个字变量如SCANTON1（相当于TON定时器的当前值，单位为ms），在用户程序的每个周期和SMW22进行累加（<code>SCANTON1+ SMW22= SCANTON1</code>），然后对SCANTON1的值进行判断，当大于定时设定值时及表示定时时间到，并把SCANTON1清0 ，进行下一次定时。</p>
<p><img src="2019-01-24-15-31-09.png"></p>
<p>当然SMW22的循环扫描时间值，和用户程序的大小有关，如果你程序的最大循环扫描时间小于10ms，那用此方法，能得到分辨率高于10ms的定时器，如果你程序的最大循环扫描时间小于100ms，那用此方法，能得到分辨率高于100ms的定时器。</p>
]]></content>
      <categories>
        <category>S7-200 SMART</category>
        <category>PLC</category>
      </categories>
      <tags>
        <tag>S7-200 SMART</tag>
      </tags>
  </entry>
  <entry>
    <title>WINCC与S7-PLCSIM连接测试项目问题</title>
    <url>/2019/01/23/WINCC%E4%B8%8ES7-PLCSIM%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1.问题描述</h1><p>相信很多初学者做工程时会碰到这样的问题：由于WINCC安装在一台电脑，STEP 7或STEP 7 (TIA Portal)安装在另外一台电脑（如工程师站），想用 WINCC连接PLC仿真软件S7-PLCSIM，来进行项目测试，是无法实现的。</p>
<p>因为WINCC是使用本机的<span style="color:#00ffff;"><strong>PLCSIM</strong></span>接口来访问S7-PLCSIM（如TCP/IP连接<span style="color:#00ffff;"><strong>PLCSIM.TCPIP.1</strong></span>，PLC没有配置的端口在S7-PLCSIM中显示为灰色无法选择）。</p>
<p>然而<strong>PLCSIM</strong>是内部接口只能在本机上访问。</p>
<p><img src="2019-01-24-13-54-45.png"></p>
<p><img src="2019-01-24-13-54-54.png"></p>
<h1 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2.解决方法</h1><h2 id="2-1方法"><a href="#2-1方法" class="headerlink" title="2.1方法"></a>2.1方法</h2><p>在工程中，运行WINCC的非工程师站一般是不会安装STEP 7的，那怎么解决上面的问题。其实也简单，把对应版本的S7-PLCSIM安装在WINCC的机器上就可以了。</p>
<p>以博途V14SP1为例，如果仿真S7-300/400，安装S7-PLCSIM V5.4SP8 （单独安装包为：<code>博途仿真V14SP1安装包\InstData\PLCSim</code>）即可。</p>
<p><img src="2019-01-24-13-56-10.png"></p>
<p>因为S7-PLCSIM V5.4SP8本身就很小（安装空间只需几十MB），也不会对安装的机器造成影响，即使要卸载也很容易。</p>
<h2 id="2-2操作步骤"><a href="#2-2操作步骤" class="headerlink" title="2.2操作步骤"></a>2.2操作步骤</h2><p>在工程师站打开S7-PLCSIM仿真器，先把要测试的PLC程序下载到仿真器，然后保存为*.plc文件。</p>
<p><img src="2019-01-24-13-57-00.png"></p>
<p>再把保存的文件拷贝到WINCC机器上，用S7-PLCSIM打开，就可以和WINCC进行测试了。</p>
<h1 id="3-其它"><a href="#3-其它" class="headerlink" title="3.其它"></a>3.其它</h1><p>而对于S7-1500 PLC，可以使用S7-PLCSIM Advanced进行仿真，它既可以通过内部接口连接也可以通过外部接口连接，所以就不存在上面的问题了。</p>
<p><img src="2019-01-24-13-57-48.png"></p>
]]></content>
      <categories>
        <category>WINCC</category>
        <category>PLC</category>
        <category>STEP7</category>
      </categories>
      <tags>
        <tag>WINCC</tag>
        <tag>STEP7</tag>
      </tags>
  </entry>
  <entry>
    <title>WINCC与使用非标准或冷僻通讯协议的设备通讯</title>
    <url>/2019/03/09/WINCC%E4%B8%8E%E4%BD%BF%E7%94%A8%E9%9D%9E%E6%A0%87%E5%87%86%E6%88%96%E5%86%B7%E5%83%BB%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%AE%BE%E5%A4%87%E9%80%9A%E8%AE%AF/</url>
    <content><![CDATA[<p>WINCC与使用一非标准通讯协议（厂家自定义协议）的设备如何通讯，这里提供个方案：使用OPC SERVER软件KEPServerEX 的 <code>User Configurable (U-CON)</code> 驱动与设备通讯，WINCC通过OPC驱动读写KEPServerEX数据。</p>
<p>关于KEPServerEX 的 <strong>User Configurable (U-CON)</strong> 驱动的说明，可访问<a href="https://www.kepware.com/zh-cn/products/kepserverex/drivers/u-con/"><strong>链接</strong><i class="fa fa-external-link"></i></a></p>
]]></content>
      <categories>
        <category>WINCC</category>
        <category>OPC</category>
        <category>KEPServerEX</category>
      </categories>
      <tags>
        <tag>WINCC</tag>
        <tag>KEPServerEX</tag>
      </tags>
  </entry>
  <entry>
    <title>WINCC读写Excel文件及信息记录</title>
    <url>/2019/01/25/WINCC%E8%AF%BB%E5%86%99Excel%E6%96%87%E4%BB%B6%E5%8F%8A%E4%BF%A1%E6%81%AF%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="1-VBScript脚本读写Excel文件"><a href="#1-VBScript脚本读写Excel文件" class="headerlink" title="1.VBScript脚本读写Excel文件"></a>1.VBScript脚本读写Excel文件</h1><p>使用一个示例来讲解：打开Excel文件book1.xls、book2.xls，把book1表Sheet1单元A1的内容赋值给book2表Sheet1单元B1。</p>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="comment">&#x27;声明变量</span></span><br><span class="line"><span class="keyword">Dim</span> ExcelApp</span><br><span class="line"><span class="keyword">Dim</span> Workbook1</span><br><span class="line"><span class="keyword">Dim</span> Workbook2</span><br><span class="line"><span class="keyword">Dim</span> Workbook1_Sheet1</span><br><span class="line"><span class="keyword">Dim</span> Workbook2_Sheet1</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;创建Excel应用程序对象</span></span><br><span class="line"><span class="keyword">Set</span> ExcelApp = CreateObject(<span class="string">&quot;Excel.Application&quot;</span>)</span><br><span class="line"></span><br><span class="line">ExcelApp.Visible = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;打开book1、book2文件，创建工作簿对象</span></span><br><span class="line"><span class="keyword">Set</span> Workbook1 = ExcelApp.Workbooks.open(<span class="string">&quot;C:\Users\liubing\Desktop\book1.xls&quot;</span>)</span><br><span class="line"><span class="keyword">Set</span> Workbook2 = ExcelApp.Workbooks.open(<span class="string">&quot;C:\Users\liubing\Desktop\book2.xls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;创建表对象</span></span><br><span class="line"><span class="keyword">Set</span> Workbook1_Sheet1 = Workbook1.Worksheets(<span class="string">&quot;Sheet1&quot;</span>)</span><br><span class="line"><span class="keyword">Set</span> Workbook2_Sheet1 = Workbook2.Worksheets(<span class="string">&quot;Sheet1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;读取文件book1表Sheet1单元A1的内容赋值给文件book2表Sheet1单元B1</span></span><br><span class="line">Workbook2_Sheet1.Range(<span class="string">&quot;B1&quot;</span>).Value = Workbook1_Sheet1.Range(<span class="string">&quot;A1&quot;</span>).Value</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;保存文件book2.xls</span></span><br><span class="line">Workbook2.Save</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;关闭工作簿退出应用</span></span><br><span class="line">ExcelApp.Workbooks.Close</span><br><span class="line">ExcelApp.Quit</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;释放各对象资源</span></span><br><span class="line"><span class="keyword">Set</span> Workbook1_Sheet1 = <span class="literal">Nothing</span></span><br><span class="line"><span class="keyword">Set</span> Workbook2_Sheet1 = <span class="literal">Nothing</span></span><br><span class="line"><span class="keyword">Set</span> Workbook1 = <span class="literal">Nothing</span></span><br><span class="line"><span class="keyword">Set</span> Workbook2 = <span class="literal">Nothing</span></span><br><span class="line"><span class="keyword">Set</span> ExcelApp = <span class="literal">Nothing</span></span><br></pre></td></tr></table></figure>

<h1 id="2-VBScript脚本执行的信息记录"><a href="#2-VBScript脚本执行的信息记录" class="headerlink" title="2.VBScript脚本执行的信息记录"></a>2.VBScript脚本执行的信息记录</h1><p>对于投运后的WINCC项目，一般不启用VBS的调试选项。</p>
<p><img src="2019-01-25-10-02-16.png"></p>
<p>如果运行中HMI突然跳出个错误信息对话框，可能会吓了运行人员。</p>
<p><img src="2019-01-25-10-02-34.png"></p>
<p>但是对于运行中的系统，通常需要log记录一些脚本执行中的信息（如脚本被执行了进行了哪些操作、脚本执行中发生了哪些问题），以便当系统发生故障时提供诊断信息。</p>
<p>这里提供一种使用“系统事件功能”记录脚本执行中信息的方法。</p>
<h1 id="3-写入系统事件"><a href="#3-写入系统事件" class="headerlink" title="3.写入系统事件"></a>3.写入系统事件</h1><h2 id="3-1VBscript启用错误处理"><a href="#3-1VBscript启用错误处理" class="headerlink" title="3.1VBscript启用错误处理"></a>3.1VBscript启用错误处理</h2><p>方法：在脚本过程中添加语句：<code>On Error Resume Next</code>，以调用错误信息。一条<a href="https://docs.microsoft.com/en-us/previous-versions//sbf5ze0e%28v%3dvs.85%29">错误信息<i class="fa fa-external-link"></i></a>主要包括3个部分:</p>
<ul>
<li><strong>Err.Number</strong></li>
<li><strong>Err.Source</strong></li>
<li><strong>Err.Description</strong></li>
</ul>
<p>可随时检查脚本执行中信息代码<strong>Err.Number</strong>的值，如对象访问的返回结果。当发生访问对象错误时，会转到紧接着发生错误的语句之后的语句，并在此继续运行。</p>
<p>如上面的脚本，当打开的book1工作簿不存在时，声明工作簿对象发生错误，通过判断<strong>Err.Number</strong>的值，并根据错误类型来做相应的处理（如弹出窗口，或在画面中诊断窗口输出，或写入系统事件等）</p>
<p>修改脚本：</p>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Set</span> Workbook1 = ExcelApp.Workbooks.open(<span class="string">&quot;C:\Users\liubing\Desktop\book1.xls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> Err.Number &lt;&gt; <span class="number">0</span> <span class="keyword">Then</span></span><br><span class="line">    ......</span><br><span class="line">    Err.Clear</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br></pre></td></tr></table></figure>

<h2 id="3-2VBScript写入系统事件"><a href="#3-2VBScript写入系统事件" class="headerlink" title="3.2VBScript写入系统事件"></a>3.2VBScript写入系统事件</h2><p>VBScript使用<span style="color:#00E3E3;">WScript.Shell</span>对象<a href="https://docs.microsoft.com/en-us/previous-versions//b4ce6by3%28v%3dvs.85%29">.LogEvent<i class="fa fa-external-link"></i></a>方法写入系统应用程序事件:<code>objShell.LogEvent intType, strMessage [,strTarget]</code></p>
<p><img src="2019-01-25-10-28-49.png"></p>
<p>方法中参数intType为事件的ID，用来定义事件的级别。</p>
<p>修改脚本：</p>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="comment">&#x27;创建WScript.Shell对象</span></span><br><span class="line"><span class="keyword">Dim</span> VBSLogEvent</span><br><span class="line"><span class="keyword">Set</span> VBSLogEvent = CreateObject(<span class="string">&quot;WScript.Shell&quot;</span>)</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line"><span class="keyword">Set</span> Workbook1 = ExcelApp.Workbooks.open(<span class="string">&quot;C:\Users\liubing\Desktop\book1.xls&quot;</span>)</span><br><span class="line"><span class="keyword">If</span> Err.Number &lt;&gt; <span class="number">0</span> <span class="keyword">Then</span></span><br><span class="line"><span class="comment">&#x27;调用方法写入WHS应用程序事件</span></span><br><span class="line">    <span class="keyword">Call</span> VBSLogEvent.LogEvent(<span class="number">1</span>,Err.Number &amp; v bCrLf &amp; <span class="string">&quot; Srce: &quot;</span> &amp; Err.Source  &amp; vbCrLf  &amp; <span class="string">&quot; Desc: &quot;</span> &amp;  Err.Description)</span><br><span class="line">    Err.Clear</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br></pre></td></tr></table></figure>

<h1 id="4-配置事件查看器"><a href="#4-配置事件查看器" class="headerlink" title="4.配置事件查看器"></a>4.配置事件查看器</h1><p>打开系统“事件查看器”，创建自定义视图来单独显示WHS应用程序事件</p>
<p><img src="2019-01-25-10-33-21.png"></p>
<p>“记录时间”选择“任何时间”，“事件级别”可全部选中，也可以按不同的事件级别创建更细分的视图。</p>
<p><img src="2019-01-25-10-33-36.png"></p>
<p>“按源”来显示事件，“事件来源”选择“WHS”</p>
<p><img src="2019-01-25-10-33-50.png"></p>
<p>选择“所有事件ID”，也可以按不同的ID创建更细分的视图。“关键字”选择“所有关键字”。</p>
<p><img src="2019-01-25-10-34-05.png"></p>
<p>其它选项使用默认设置即可，具体使用方法可查看事件查看器帮助。</p>
<p><img src="2019-01-25-10-34-54.png"></p>
<p>点击“确认”，在弹出的对话框为创建的视图输入一个名称，再点击“确认”，一个自定义的事件视图即创建完成。</p>
<p><img src="2019-01-25-10-35-12.png"></p>
<p>从中可以查看Vbscript脚本记录的各种信息：</p>
<p><img src="2019-01-25-10-35-26.png"></p>
]]></content>
      <categories>
        <category>WINCC</category>
        <category>VBScript</category>
      </categories>
      <tags>
        <tag>WINCC</tag>
        <tag>VBScript</tag>
        <tag>EXCEL</tag>
      </tags>
  </entry>
  <entry>
    <title>一款很好用的VBScript编辑调试器</title>
    <url>/2019/04/29/%E4%B8%80%E6%AC%BE%E5%BE%88%E5%A5%BD%E7%94%A8%E7%9A%84VBScript%E7%BC%96%E8%BE%91%E8%B0%83%E8%AF%95%E5%99%A8/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>代码编辑器Visual Studio Code</title>
    <url>/2019/01/27/%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8Visual-Studio-Code/</url>
    <content><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h1><p><a href="https://code.visualstudio.com/"><strong>Visual Studio Code</strong><i class="fa fa-external-link"></i></a>（简称VS Code）是一个由微软开发的，同时支持Windows、Linux、和MacOS系统且开放源代码的代码编辑器，它支持测试，并内置了Git版本控制功能，同时也具有开发环境功能，例如代码补全、代码片段、和代码重构等，该编辑器支持用户个人化配置，例如改变主题颜色、键盘快捷方式等各种属性和参数，还在编辑器中内置了扩展程序管理的功能。</p>
<p><img src="2019-01-27-13-21-55.png"></p>
<h1 id="2-开发"><a href="#2-开发" class="headerlink" title="2.开发"></a>2.开发</h1><p><strong>Visual Studio Code</strong> 基于 <strong>Electron</strong> 开发。<strong>Electron</strong> 是一个基于 <strong>Chromium</strong> 的项目，可用于开发基于 <strong>Node.js</strong> 的本地应用程序。<strong>Visual Studio Code</strong> 使用 Blink 排版引擎渲染用户界面。虽然 <strong>Visual Studio Code</strong> 基于 Electron 框架，但并不是Atom的复刻。Code是由“Monaco”的编辑器核心制作，与 Visual Studio Team Services 相同。</p>
<h1 id="3-历史"><a href="#3-历史" class="headerlink" title="3.历史"></a>3.历史</h1><p>微软在2015 Build大会上宣布即将开发 <strong>Visual Studio Code</strong>，在2015年4月29日发布第一个预览版本。<br>2015年11月18日，Code团队将其在GitHub上开源，并采用MIT许可证，同时宣布将支持扩展功能。<br>2016年4月14日，<strong>Visual Studio Code</strong>正式版发布，版本号为1.0.0。</p>
<h1 id="4-功能和语言支持"><a href="#4-功能和语言支持" class="headerlink" title="4.功能和语言支持"></a>4.功能和语言支持</h1><p><strong>Visual Studio Code</strong>支持多种编程语言。与其他编辑器不同的是，Code的许多功能并不在菜单中显示，而是通过“命令面板”来调用。用户可以在命令面板中搜索和输入命令，从而实现指定功能，例如安装插件、设置属性等。默认地，打开命令面板的快捷键是<code>Ctrl+Shift+P</code>。<br>Code具备了现代文本编辑器所具有的功能，例如更改字符编码、更换换行符等。<br>下表是<strong>Visual Studio Code</strong>原生支持的语言：</p>
<p><img src="2019-01-27-13-27-12.png"></p>
<p><strong>Visual Studio Code</strong>对<code>C#</code>、<code>JavaScript</code>、和<code>TypeScript</code>的原生支持最为完备。<br>此外<strong>Visual Studio Code</strong>还支持扩展程序。通过安装扩展程序，Code可以支持更多新的语言、界面主题、测试器，以及更多的增值服务。<strong>Visual Studio Code</strong>的扩展程序运行于独立的进展中，确保编辑器运行速度不会被拖慢。</p>
]]></content>
      <categories>
        <category>VBScript</category>
        <category>C</category>
        <category>VBA</category>
      </categories>
      <tags>
        <tag>VBScript</tag>
        <tag>C</tag>
        <tag>VBA</tag>
      </tags>
  </entry>
  <entry>
    <title>免费的云MQTT测试服务端</title>
    <url>/2019/01/25/%E5%85%8D%E8%B4%B9%E7%9A%84%E4%BA%91MQTT%E6%B5%8B%E8%AF%95%E6%9C%8D%E5%8A%A1%E7%AB%AF/</url>
    <content><![CDATA[<h1 id="WINCC-V7-5支持云连接"><a href="#WINCC-V7-5支持云连接" class="headerlink" title="WINCC V7.5支持云连接"></a>WINCC V7.5支持云连接</h1><p>WINCC V7.5版新增了云连接功能，可以自动将变量从 WinCC 站传送到云。<br>可连接到<code>Amazon Web Services (MQTT)</code>、<code>Microsoft Azure (MQTT)</code> 云提供商，详细信息可查看WINCC帮助。</p>
<p><img src="2019-01-25-11-06-16.png"></p>
<h1 id="免费的云MQTT测试服务端"><a href="#免费的云MQTT测试服务端" class="headerlink" title="免费的云MQTT测试服务端"></a>免费的云MQTT测试服务端</h1><p>给大家分享一个免费的云MQTT服务端<a href="https://test.mosquitto.org/">mosquitto<i class="fa fa-external-link"></i></a></p>
<p><img src="2019-01-25-11-09-09.png"></p>
<p>连接方法网站内有详细的说明。</p>
<blockquote>
<p>生成客户端证书和密钥的工具可在此下载<br><a href="http://slproweb.com/products/Win32OpenSSL.html">http://slproweb.com/products/Win32OpenSSL.html<i class="fa fa-external-link"></i></a></p>
</blockquote>
<p><img src="2019-01-25-11-10-41.png"></p>
<p>通过MQTT客户端可订阅WINCC上传到服务端的数据</p>
<p><img src="2019-01-25-11-11-00.gif"></p>
]]></content>
      <categories>
        <category>WINCC</category>
        <category>MQTT</category>
      </categories>
      <tags>
        <tag>WINCC</tag>
        <tag>MQTT</tag>
      </tags>
  </entry>
  <entry>
    <title>关于PLC手册中的源型和漏型</title>
    <url>/2019/04/25/%E5%85%B3%E4%BA%8EPLC%E6%89%8B%E5%86%8C%E4%B8%AD%E7%9A%84%E6%BA%90%E5%9E%8B%E5%92%8C%E6%BC%8F%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="1-描述"><a href="#1-描述" class="headerlink" title="1.描述"></a>1.描述</h1><p>对于PLC开关量输入模块要么连接的是“无源”干接点信号，如继电器触点、位置开关；要么连接的就是”有源”开关器件信号，如接近开关、编码器。<br>对于“无源”干接点信号，其对于电流没有流入、流出之分，公共端0V和24V的开关量输入模块都可以连接，所以不存在选型问题。<br>而“有源”开关器件信号就不一定了，那传感器和模块如何匹配？下面以接近开关为例解答。</p>
<h1 id="2-三极管"><a href="#2-三极管" class="headerlink" title="2.三极管"></a>2.三极管</h1><p>接近开关，其基本原理是通过一主回路控制双极性结型晶体管（bipolar junction transistor, BJT，俗称三极管）的截止与饱和来输出OFF、ON信号。</p>
<p><img src="2019-04-25-13-30-29.png"></p>
<p>这里先复习下三极管的基本工作原理：<br>三极管可分为NPN、PNP两种类型，在双极性晶体管电学符号中，箭头指向为正向放大时电流的方向（电子迁移的反方向）。<br>NPN型晶体管的箭头从基极B指发射极E，PNP型晶体管的箭头从发射极E指向基极B。</p>
<p><img src="2019-04-25-13-31-50.png"></p>
<p>下图中左边的蓝色区域为发射极E，中间绿色区域为基极B，右边蓝色区域为集电极C。灰色的箭头为电子的流动方向示意，发射极注入的大部分电子移动到了集电极，少部分在基极与空穴复合。白色箭头为基极的多数载流子空穴的流动方向示意。</p>
<p><img src="2019-04-25-13-32-09.png"></p>
<p>NPN型双极性晶体管处于截至区的条件是：Vbe&lt;导通电压。<br>NPN型双极性晶体管处于正向放大区的条件是：在发射结上具有正向偏置(Vb&gt;Ve)，而集电结具有反向偏置(Vb&lt;Vc)。<br>NPN型双极性晶体管处于饱和区的条件是：在发射结上具有正向偏置(Vb&gt;Ve)，集电结正向偏置(Vb&gt;Vc)，且Vce&lt;Vbe。<br>下图为双极性晶体管的输出特性曲线</p>
<p><img src="2019-04-25-13-32-45.png"></p>
<p>蓝色虚线左边的区域为饱和区（Saturation），Ic=Ics≈Vcc/Rc。<br>由蓝色虚线、红色虚线和棕色虚线包围的区域为放大区（Active），Ic≈βIb，在这个区域里，发射极电流与基极电流成近似线性关系。<br>红色虚线下方表示晶体管尚未导通，处于截止区（Cut-off），Ic≈0。<br>棕色虚线为晶体管的最大集电极耗散功率，它与两条坐标轴包围的区域为安全工作区，与横轴的交点为最大集电极-基极电压。<br>IB0为开启晶体管的最小基极电流（Vbe须超过其导通电压，约为0.5V）。</p>
<p>可以根据晶体管三个极的的偏置状态（注意：PNP型晶体管和NPN型晶体管的电压描述恰好相反），定义双极性晶体管几个不同的工作区。按发射结（基极-发射极结）、集电结（基极-集电极结）的偏置情况，工作区可以分为：</p>
<p><img src="2019-04-25-13-33-13.png"></p>
<h1 id="3-接近开关"><a href="#3-接近开关" class="headerlink" title="3.接近开关"></a>3.接近开关</h1><p><font color=ForestGreen><strong>NPN集电极开路输出型</strong></font></p>
<p>下图为欧姆龙E2B型接近开关NPN集电极开路输出型号的接线原理图：</p>
<p><img src="2019-04-25-13-33-57.png"></p>
<blockquote>
<p><a href="https://pan.baidu.com/s/1OP9oPBjUudbHI0NuETRqvQ"><strong>E2B型接近开关手册下载</strong><i class="fa fa-external-link"></i></a><br>百度网盘提取码：6y89</p>
</blockquote>
<p>当物体靠近接近开关，主回路控制三极管饱和导通。从上面描述的三极管工作原理可知，此时集电极饱和电流Ics≈Vcc/Rc，从集电极C流向发射极E。从整个回路看：电流从负载端流出进入接近开关④引脚（黑线），从接近开关③引脚流出（蓝线）。且Vce=Vcc-Ics×Rc=Vces≈0.2～0.3V，Vces很小，集电极回路中的C、E极之间近似于短路，相当于开关闭合，VC≈VE≈0V集电极输出一低电平。<br>Vcc需由接近开关连接的负载提供，所以NPN集电极开路输出接近开关只能连接公共端为24V开关量输入模块。</p>
<p><img src="2019-04-25-13-34-56.png"></p>
<p><font color=ForestGreen><strong>PNP集电极开路输出型</strong></font></p>
<p>下图为欧姆龙E2B型接近开关PNP集电极开路输出型号的接线原理图：</p>
<p><img src="2019-04-25-13-35-17.png"></p>
<p>当物体靠近接近开关，主回路控制三极管饱和导通。从上面描述的三极管工作原理可知，此时集电极饱和电流Ics=Vcc/Rc，从发射极E流向集电极C。从整个回路看：电流从接近开关①引脚（褐线）流入，从接近开关④引脚流出（黑线），流入负载。集电极回路中的C、E极之间近似于短路，相当于开关闭合，VC≈VE≈24V集电极输出一高电平。<br>所以PNP集电极开路输出接近开关只能连接公共端为0V开关量输入模块。</p>
<p><img src="2019-04-25-13-35-34.png"></p>
]]></content>
      <categories>
        <category>PLC</category>
        <category>DI</category>
      </categories>
      <tags>
        <tag>PLC</tag>
        <tag>DI</tag>
      </tags>
  </entry>
  <entry>
    <title>关于WINCC Modbus TCPIP驱动如何读取64位浮点数</title>
    <url>/2019/01/22/%E5%85%B3%E4%BA%8EWINCC-Modbus-TCPIP%E9%A9%B1%E5%8A%A8%E5%A6%82%E4%BD%95%E8%AF%BB%E5%8F%9664%E4%BD%8D%E6%B5%AE%E7%82%B9%E6%95%B0/</url>
    <content><![CDATA[<h1 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1.问题描述</h1><p>大家知道目前为止WINCC Modbus TCPIP驱动是不支持64位浮点数的</p>
<p><img src="2019-01-23-13-10-18.png"></p>
<p>但做项目往往会碰到从站使用这种类型数据，如累积流量值、电度量。那如何读取呢？</p>
<h1 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2.解决方法</h1><p>Modbus协议以一系列具有不同特征的数据模型为基础。四个基本模型为：</p>
<p><img src="2019-01-23-13-11-03.png"></p>
<p>对于一个64位浮点数，就是以16-bits word为数据模型，4个连续的保持寄存器。所以可以使用功能码0x03分别读取这4个连续的保持寄存器值，然后还原为原64位浮点数。</p>
<p>如以Modbus Slave为从站，设置WINCC要读取的64位浮点数，其保持寄存器地址为4x00001-4x00004。</p>
<p><img src="2019-01-23-13-11-31.png"></p>
<p>在WINCC Modbus TCPIP驱动添加四个“无符号的 16 位值”变量读取这4个保持寄存器的值</p>
<p><img src="2019-01-23-13-11-58.png"></p>
<p>然后用以下C脚本还原为64位浮点数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;apdefap.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnClick</span><span class="params">(<span class="keyword">char</span>* lpszPictureName, <span class="keyword">char</span>* lpszObjectName, <span class="keyword">char</span>* lpszPropertyName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  WORD w1;</span><br><span class="line">  WORD w2;</span><br><span class="line">  WORD w3;</span><br><span class="line">  WORD w4;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">double</span> a;</span><br><span class="line"></span><br><span class="line">  w1=GetTagWord(<span class="string">&quot;w1&quot;</span>);	<span class="comment">//Return-Type: WORD </span></span><br><span class="line">  w2=GetTagWord(<span class="string">&quot;w2&quot;</span>);	<span class="comment">//Return-Type: WORD </span></span><br><span class="line">  w3=GetTagWord(<span class="string">&quot;w3&quot;</span>);	<span class="comment">//Return-Type: WORD </span></span><br><span class="line">  w4=GetTagWord(<span class="string">&quot;w4&quot;</span>);	<span class="comment">//Return-Type: WORD </span></span><br><span class="line"></span><br><span class="line">  ((WORD*)&amp;a)[<span class="number">0</span>]=w1; </span><br><span class="line">  ((WORD*)&amp;a)[<span class="number">1</span>]=w2;</span><br><span class="line">  ((WORD*)&amp;a)[<span class="number">2</span>]=w3; </span><br><span class="line">  ((WORD*)&amp;a)[<span class="number">3</span>]=w4; </span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;a = %lf\r\n&quot;</span>,a); </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有一点要注意：为了保证数据的一致性，4个连续的保持寄存器必须在一帧报文读取。如下面的情况，可能会导致还原的浮点数不正确：</p>
<p>WINCC需读取Modbus Slave的一个16位整型数据（其保持寄存器地址为4x00001）、一个64位浮点数（其保持寄存器起始地址为4x00100）（当然，对于这么设计从站设备的人，可以认为他不专业）。</p>
<p>由于WINCC优化了其Modbus TCPIP驱动报文，64位浮点数的4个寄存器会被分成两帧报文读取。</p>
<p><img src="2019-01-23-13-13-55.png"></p>
]]></content>
      <categories>
        <category>WINCC</category>
        <category>通讯</category>
      </categories>
      <tags>
        <tag>WINCC</tag>
        <tag>SIEMENS</tag>
        <tag>Modbus</tag>
      </tags>
  </entry>
  <entry>
    <title>关于远程连接S7-200 SMART PLC</title>
    <url>/2019/01/24/%E5%85%B3%E4%BA%8E%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5S7-200-SMART-PLC/</url>
    <content><![CDATA[<p>远程连接一台S7-200 SMART PLC，网络方案如下图：</p>
<p><img src="2019-01-24-15-39-40.png"></p>
<p>PC2拥有公网IP，配置为vpn server，PC1和PC3通过vpn连接到PC2，PC3局域网连接ip地址为192.168.1.200的s7-200 smart plc，在PC3上把plc的102端口映射到PC3 vpn client ip的102端口，这样PC1上的STEP 7-MicroWIN SMART就可以通过PC3 vpn client ip的102端口连接plc了。</p>
<p>当打开STEP 7-MicroWIN SMART，准备连接plc</p>
<p><img src="2019-01-24-15-40-15.png"></p>
<p>可在通信接口里竟然没有vpn 适配器</p>
<p><img src="2019-01-24-15-40-30.png"></p>
<p>正好pc1上安装有KEPServerEX 6，打开发现是可以扫描到vpn适配器，这说明STEP 7-MicroWIN SMART扫描接口的能力还有待加强。</p>
<p><img src="2019-01-24-15-40-46.png"></p>
<p>可是STEP 7-MicroWIN SMART无法选择需要的通讯接口，怎么连接？更谈不上可以扫描到在线plc了。那既然知道待连接的ip地址，直接添加ip可不可以连接，添加pc3 vpn client ip（192.168.2.103）后，点击“确认”，plc直接连接上了。</p>
<p><img src="2019-01-24-15-41-18.png"></p>
<p>这个可以给大家在连接s7-200 smart plc解决类似的问题提供个参考。</p>
<p><i class="fa fa-pencil"></i></p>
]]></content>
      <categories>
        <category>S7-200 SMART</category>
        <category>PLC</category>
        <category>通讯</category>
      </categories>
      <tags>
        <tag>S7-200 SMART</tag>
      </tags>
  </entry>
  <entry>
    <title>新版WINCC V7.5 ASIA</title>
    <url>/2019/01/22/%E6%96%B0%E7%89%88WINCC-V7-5-ASIA/</url>
    <content><![CDATA[<p>发售于2018年9月份：</p>
<p><img src="2019-01-23-08-23-33.png"></p>
<p>支持的操作系统：</p>
<p><img src="2019-01-23-08-24-40.png"></p>
<p>更多技术规格：<br><a href="https://mall.industry.siemens.com/mall/en/WW/Catalog/Products/10042373#More%20information">https://mall.industry.siemens.com/mall/en/WW/Catalog/Products/10042373#More%20information</a></p>
<p>具体兼容性可通过下面链接在线查询：<br><a href="https://support.industry.siemens.com/kompatool/pages/main/index.jsf">https://support.industry.siemens.com/kompatool/pages/main/index.jsf</a></p>
<p>DEMO版下载链接：<br>百度网盘：<br>链接：<a href="https://pan.baidu.com/s/1VRAugxtL9jIwFlNVF7Oxpg">https://pan.baidu.com/s/1VRAugxtL9jIwFlNVF7Oxpg</a><br>提取码：f63f </p>
]]></content>
      <categories>
        <category>WINCC</category>
      </categories>
      <tags>
        <tag>WINCC</tag>
        <tag>SIEMENS</tag>
      </tags>
  </entry>
  <entry>
    <title>深入浅出浮点数</title>
    <url>/2019/04/25/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E6%B5%AE%E7%82%B9%E6%95%B0/</url>
    <content><![CDATA[<p>没有基础，何来进阶，知识体系环环相扣，没有夯实的基础，你就会碰到这样那样难以解决的问题。所以，对于与自控相关的基础内容，大家应该拿出时间去熟悉掌握。本文整理了些关于浮点数的内容，以供交学。</p>
<h1 id="1-浮点数描述"><a href="#1-浮点数描述" class="headerlink" title="1.浮点数描述"></a>1.浮点数描述</h1><p><strong>浮点数</strong>，通俗的讲就是显示格式具有小数点的数，如1.234、1234.0（十进制形式）。计算机中浮点数会按照某一处理标准存储在单元中（如IEEE 754标准），其复杂度远大于其它类型的数据。</p>
<p>通常对于要么很大或很小的浮点数，难以用十进制形式方便地编写，则使用科学记数法来表示：即由一个有效数字（尾数mantissa）和幂数（exponent）组合而成，通常是乘以基数为10的整数次指数得到。</p>
<p><img src="2019-04-25-14-03-05.png"></p>
<p>其中尾数应满足<code>1≤|mantissa|≤10</code>（通过调整10的指数大小使得mantissa的绝对值至少为1但小于10）。如STEP 7-MicroWIN SMART中浮点数0.00001234显示为1.234E-05：</p>
<p><img src="2019-04-25-14-03-22.png"></p>
<p>如一个电子的质量大约是0.000 000 000 000 000 000 000 000 000 000 910 938 356  kg。如果用一般的方法，将所有位数都写出来，很难直接确知它的大小，还会浪费很多空间。但使用科学记数法，写为9.109 383 56 × 10^-31  kg，相对要简单得多，数的数量级、精确度和数值都一目了然。</p>
<blockquote>
<p>有效数字:指科学计算中用以表示一个浮点数精度的那些数字。一般地，指一个用小数形式表示的浮点数中，从第一个非零的数字算起的所有数字。如1.24和0.00124的有效数字都有3位。包含小数点的数中，结尾的零是有效的。例如 12.2300 有六位有效数字（1、2、2、3、0、0）。</p>
</blockquote>
<h1 id="2-IEEE二进制浮点数算术标准（IEEE-754）"><a href="#2-IEEE二进制浮点数算术标准（IEEE-754）" class="headerlink" title="2.IEEE二进制浮点数算术标准（IEEE 754）"></a>2.IEEE二进制浮点数算术标准（IEEE 754）</h1><p>该标准定义了五种基本格式，有三种二进制浮点基本格式（用32,64或128位编码）和两种十进制浮点基本格式（用64或128位编码）。如PLC中常使用的单精度二进制浮点格式：binary32，双精度二进制浮点格式：binary64。</p>
<p>一个浮点数 (Value) 可以这样表示：</p>
<p><img src="2019-04-25-14-06-22.png"></p>
<p>也就是浮点数的实际值，等于符号位（sign bit）乘以指数值(exponent)再乘以有效数(significand)。</p>
<p><img src="2019-04-25-14-07-21.png"></p>
<p>二进制浮点数是以符号数值表示法的格式存储：最高有效位被指定为符号位（sign bit）；“指数部分”即次高有效的e个比特存储指数部分；最后剩下的f个低有效位的比特，存储“有效数”（significand）的小数部分（fraction）。</p>
<p><font color=ForestGreen><strong>单精度浮点格式</strong></font></p>
<p>在IEEE 754中定义单精度浮点数格式是一种：在计算机存储器中占用4个字节（32 bits），利用“浮点”（浮动小数点）的方法，表示一个范围很大的数值，称为binary32格式。</p>
<p><img src="2019-04-25-14-09-30.png"></p>
<p>标准规定binary32具有：</p>
<ul>
<li>符号位：1位（0代表正，1代表负）</li>
<li>指数存储宽度：8位</li>
<li>有效数存储宽度：23位（真有效数包括二进制点右侧的23个分数位（及真有效数的小数部分）和值为1的隐式前导位（位于二进制点的左侧，及真有效数的整数部分）。因此，只有23 个小数位的有效位被存储，但总精度是24位）</li>
</ul>
<p><img src="2019-04-25-14-10-15.png"></p>
<p>单精度浮点数的指数域是8位，存储值为0～255。标准规定固定偏移值是28-1-1=128-1=127，则单精度浮点数的指数部分实际取值是从0-127=-127到255-127=128（-127和128被用作特殊值处理，包括“<strong>非规约形式的浮点数</strong>”和“<strong>特殊值</strong>”）。</p>
<p>采用指数的实际值加上固定的偏移值的办法（指数偏移）表示浮点数的指数，好处是可以用长度为e个比特的无符号整数来表示所有的指数取值，这使得两个浮点数的指数大小的比较更为容易，因为非负数的比较完全可以从最高有效位遍历比较。</p>
<p>以上面的0.15625二进制存储值为例转为浮点数(Value)：</p>
<p><img src="2019-04-25-14-10-48.png"></p>
<p><font color=ForestGreen><strong>规约形式的浮点数</strong></font></p>
<p><img src="2019-04-25-14-11-24.png"></p>
<p>如果浮点数中指数部分的编码值在 <code>0&lt;exponent≤2e-2</code> 之间（单精度浮点数e=8），那么这个浮点数称为规约形式的浮点数（Normalized finite numbers）。</p>
<p>最小正规约浮点数：<br>0 <font color=Fuchsia>00000001</font> 000000000000000000000002 = 0080 000016 = 2 -126 ≈1.1754943508×10^-38<br>最大正规约浮点数：<br>0 <font color=Fuchsia>11111110</font> 111111111111111111111112 = 7f7f ffff16 = 2 127 ×（2 - 2 -23）≈3.4028234664×10^38</p>
<p><font color=ForestGreen><strong>非规约形式的浮点数</strong></font></p>
<p>如果浮点数的指数部分的编码值是0（因为非规格数的指数是固定的exponent = 2-126，于是也就不用存储指数，因此编码值全为0，这也方便和规约形式的浮点数分开），分数部分非零，那么这个浮点数将被称为非规约形式的浮点数（Denormalized finite numbers）。</p>
<p><img src="2019-04-25-14-13-19.png"></p>
<p>一般是某个数字非常接近零时才会使用非规约型式来表示。其绝对值已经小于所有的规约浮点数的绝对值，即所有的非规约浮点数比规约浮点数更接近0，即上图GAP范围内的数。对于规约浮点数，其有效数（significand=1+fraction）大于等于1且小于2（因为隐式前导位为1），而非规约浮点数的有效数（significand=fraction）小于1且大于0（因为隐式前导位为0）。</p>
<p>如STEP 7-MicroWIN SMART，从手册中给出的数值范围可知，S7-200 SMART PLC无法处理非规约形式的浮点数</p>
<p><img src="2019-04-25-14-13-41.png"></p>
<p>值2#0000_0000_0011_0000_0000_0000_0000_0000，对应非规约形式的浮点数为4.408104E-039，其显示为NAN（作为溢出处理）。</p>
<p><img src="2019-04-25-14-13-58.png"></p>
<p>对于WINCC，可以处理非规约形式的浮点数，这一点要了解。</p>
<p><img src="2019-04-25-14-14-13.png"></p>
<p><img src="2019-04-25-14-14-27.png"></p>
<p><font color=ForestGreen><strong>特殊值</strong></font></p>
<p>除了规约和非规约数，还包括一些特殊值：</p>
<ul>
<li>如果指数 = 0并且尾数的小数部分是0，这个数为±0（和符号位相关）</li>
<li>如果指数 = 2e-1并且尾数的小数部分是0，这个数是±∞（同样和符号位相关），如STEP 7-MicroWIN SMART中显示为±INF。</li>
<li>如果指数 = 2e-1并且尾数的小数部分非0，这个数表示为一个非法数（NaN）。</li>
</ul>
<p><font color=ForestGreen><strong>精度</strong></font></p>
<p>任何数据的存储长度是有限的，单精和双精浮点数的有效数字分别是有存储的23和52个位，加上最左边没有存储的1个隐式前导位，即是24和53个位。</p>
<p><img src="2019-04-25-14-15-11.png"></p>
<p><font color=ForestGreen><strong>舍入</strong></font></p>
<p>任何有效数上的运算结果，通常都存放在较长的寄存器中，当结果被放回浮点格式时，必须将多出来的比特丢弃。 有多种方法可以用来运行舍入作业，实际上IEEE标准列出4种不同的方法：</p>
<ul>
<li>舍入到最接近：舍入到最接近，在一样接近的情况下偶数优先（Ties To Even，这是默认的舍入方式）：会将结果舍入为最接近且可以表示的值，但是当存在两个数一样接近的时候，则取其中的偶数（在二进制中是以0结尾的）。</li>
<li>朝+∞方向舍入：会将结果朝正无限大的方向舍入。</li>
<li>朝-∞方向舍入：会将结果朝负无限大的方向舍入。</li>
<li>朝0方向舍入：会将结果朝0的方向舍入。</li>
</ul>
]]></content>
      <categories>
        <category>PLC</category>
        <category>Data</category>
      </categories>
      <tags>
        <tag>WINCC</tag>
        <tag>S7-200 SMART</tag>
        <tag>PLC</tag>
        <tag>Data</tag>
      </tags>
  </entry>
  <entry>
    <title>西家软件关于Set PG-PC Interface的问题</title>
    <url>/2019/01/23/%E8%A5%BF%E5%AE%B6%E8%BD%AF%E4%BB%B6%E5%85%B3%E4%BA%8ESet-PG-PC-Interface%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="1-先谈下S7协议"><a href="#1-先谈下S7协议" class="headerlink" title="1.先谈下S7协议"></a>1.先谈下S7协议</h1><p>S7协议是西门子自动化系统核心通讯协议，独立于西门子各种通讯总线，可用于所有子网 (MPI，PROFIBUS，工业以太网)。下图是其ISO-OSI参考模型，关于S7协议详细内容，请阅读以前推送的文章《<a href="https://mp.weixin.qq.com/s/vtG3gdR7d2pNpa7e-xlUVQ">西门子S7以太网通讯协议<i class="fa fa-external-link"></i></a>》。</p>
<p><img src="2019-01-24-13-39-56.png"></p>
<p>以工业以太网的S7为例，Industrial Ethernet、IP、TCP、ISO协议就是它的基础，好比盖房子，没有这些地基S7这个房子就盖不起来。</p>
<p><img src="2019-01-24-13-40-19.png"></p>
<p>如双方进行ISO-on-TCP S7通讯时，必须先建立起TCP/IP这条路S7这辆车才能在上面跑。这个通讯双方定义为客户端和服务端，互称对方为通讯伙伴partner。如SIMATIC NET OPC SERVER、WINCC、Prodave、Applications、单边连接的主动激活端，都可看成客户端，来连接服务端如S7-PLC。</p>
<h1 id="2-TCP-IP连接的建立"><a href="#2-TCP-IP连接的建立" class="headerlink" title="2.TCP/IP连接的建立"></a>2.TCP/IP连接的建立</h1><p>服务端Server监听其网络接口的IP的102端口（S7协议指定端口），客户端Client使用其选择的网络接口的IP地址和102端口建立与服务端的连接。连接过程称为“三次握手”，关于此详细内容可自行谷歌百度。</p>
<p><img src="2019-01-24-13-41-30.png"></p>
<p>如KEPServerEX使用Siemens TCP/IP Ethernet驱动连接S7-PLC，新建通道channel时直接设置客户端使用的网络接口。</p>
<p><img src="2019-01-24-13-41-46.png"></p>
<p>再如STEP 7 配置SIMATIC NET OPC SERVER使用ISO-on-TCP S7协议连接S7-PLC，直接选择添加OPC SERVER PC Station客户端已安装的通讯模块如“常规IE”。</p>
<p><img src="2019-01-24-13-42-03.png"></p>
<p>并设置网卡的IP地址，用于连接服务端S7-PLC。</p>
<p><img src="2019-01-24-13-42-26.png"></p>
<p>服务端S7-PLC，其系统自动监听CPU PN接口或CP PN接口IP地址的102端口，等待客户端连接。</p>
<p>那WINCC作为客户端是如何配置其IP的？以S7-1200/1500驱动为例，连接参数中“IP地址”为服务端S7-1200 PLC IP，通过选择“访问点”来调用网络接口，这“访问点”来自哪？</p>
<p><img src="2019-01-24-13-42-50.png"></p>
<p>这时“Set PG-PC Interface”就登场了， 它用来添加/删除和配置、测试“访问点”，供应用程序如WINCC、STEP 7、Prodave来调用。</p>
<p><img src="2019-01-24-13-43-06.png"></p>
<h1 id="3-Set-PG-PC-Interface"><a href="#3-Set-PG-PC-Interface" class="headerlink" title="3.Set PG-PC Interface"></a>3.Set PG-PC Interface</h1><p>应用程序（除了STEP7）使用哪个访问点没有规定，可以自己添加访问点，并根据通讯连接的网络类型分配对应的接口就可以了。详细内容可查看“Set PG-PC Interface”帮助。<br>如使用Prodave6.dll编程连接S7-PLC时，通讯连接函数LoadConnection_ex6的pAccessPoint”访问点“参数，默认使用”S7ONLINE”，也可以赋值其它的访问点。</p>
<p><img src="2019-01-24-13-43-52.png"></p>
<p>对于STEP 7，只能使用”S7ONLINE (STEP 7)”访问点。我是这么理解的，如果你有STEP 7源代码，也可以把它改成其它访问点。</p>
<h1 id="4-其它"><a href="#4-其它" class="headerlink" title="4.其它"></a>4.其它</h1><p>当系统中多个软件在“开始菜单”都有“Set PG-PC Interface”启动项时，从各自“启动命令行”可看出是同一程序（如Windows7 64中路径为<code>C:\Windows\SysWOW64\s7epatsx.exe</code>），只不过启动时带的参数不一样。</p>
<p><img src="2019-01-24-13-44-31.png"></p>
<p>STEP7 下启动命令行为：<code>C:\Windows\SysWOW64\s7epatsx.exe -lnl S7ONLINE -App=STEP7</code>，SIMATIC NET下为<code>C:\Windows\SysWOW64\s7epatsx.exe  -App=Simatic</code>。使用参数“-lnl 访问点”可限制“Set PG-PC Interface”只能设置这一个访问点。</p>
<p>一般在“控制面板”中启动“Set PG-PC Interface”即可。</p>
]]></content>
      <categories>
        <category>WINCC</category>
        <category>STEP7</category>
      </categories>
      <tags>
        <tag>WINCC</tag>
        <tag>STEP7</tag>
      </tags>
  </entry>
</search>
